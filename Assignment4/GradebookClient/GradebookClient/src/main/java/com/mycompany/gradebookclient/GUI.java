/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.gradebookclient;

import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.UniformInterfaceException;
import com.sun.jersey.api.client.WebResource;

//My import
import com.sun.jersey.api.client.config.ClientConfig;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import javax.ws.rs.core.MediaType;
import java.util.logging.Logger;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.*;
import javax.swing.DefaultListModel;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Request;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
/**
 *
 * @author shaosh
 */
public class GUI extends javax.swing.JFrame {
    private WebResource webResource;
    private Client client;
    private static final String BASEURI = "http://localhost:8080/GradebookServer/webresources/";
    private static final String XMLNS = "http://cse446.asu.edu/CRUDAssignment";
    private static final Logger LOG = Logger.getLogger(GUI.class.getName());
    private static String[] itemArray;
    private static int itemCount = 0;
    private static Request request;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setUneditable();  
        itemArray = new String[12];
//        for(int i = 0; i < 12; i++)
//            itemArray[i] = "";
        ClientConfig config = new DefaultClientConfig();
        client = Client.create(config);
        webResource = client.resource(BASEURI);
        
        getReleasedItems();
    }
    
    private static void setUneditable(){    
        status.setEditable(false);
        mediatype.setEditable(false);
        responseText.setEditable(false);
        grade1.setEditable(false);
        letter1.setEditable(false);
        comments1.setEditable(false);
        status1.setEditable(false);
        mediatype1.setEditable(false);
        responseText1.setEditable(false); 
        name.setEditable(false);
        name1.setEditable(false);
        total.setEditable(false);
        total1.setEditable(false);
        letter.setEditable(false);
        possible.setEditable(false);
        possible1.setEditable(false);
        responseText.setLineWrap(true);
        responseText.setWrapStyleWord(true);
        responseText1.setLineWrap(true);
        responseText1.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        responseText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        createBtn = new javax.swing.JButton();
        readBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        grade = new javax.swing.JTextField();
        comments = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        status = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        mediatype = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        itemCombo = new javax.swing.JComboBox();
        clearBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        total = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        letter = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        possible = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        itemList1 = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        id1 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        name1 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        grade1 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        comments1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        status1 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        mediatype1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        responseText1 = new javax.swing.JTextArea();
        readBtn1 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        letter1 = new javax.swing.JTextField();
        clearBtn1 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        total1 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        possible1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(580, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        tab.setPreferredSize(new java.awt.Dimension(580, 400));

        jPanel1.setPreferredSize(new java.awt.Dimension(580, 600));
        jPanel1.setLayout(null);

        jLabel6.setText("Response");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(30, 300, 60, 15);

        responseText.setEditable(false);
        responseText.setColumns(20);
        responseText.setRows(5);
        jScrollPane1.setViewportView(responseText);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 330, 510, 200);

        jScrollPane2.setViewportView(itemList);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(30, 60, 140, 230);

        jLabel7.setText("Item Title");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(190, 30, 60, 15);

        jLabel5.setText("Comments");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(190, 190, 80, 15);

        jLabel2.setText("Released Grading Items");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 30, 150, 15);

        createBtn.setText("create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });
        jPanel1.add(createBtn);
        createBtn.setBounds(460, 20, 81, 30);

        readBtn.setText("read");
        readBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBtnActionPerformed(evt);
            }
        });
        jPanel1.add(readBtn);
        readBtn.setBounds(460, 60, 80, 30);

        updateBtn.setText("update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jPanel1.add(updateBtn);
        updateBtn.setBounds(460, 100, 81, 30);

        deleteBtn.setText("delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jPanel1.add(deleteBtn);
        deleteBtn.setBounds(460, 140, 81, 30);

        jLabel3.setText("Student Name");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(190, 110, 80, 15);

        jLabel4.setText("Grade");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(190, 150, 50, 15);
        jPanel1.add(id);
        id.setBounds(270, 60, 140, 30);
        jPanel1.add(grade);
        grade.setBounds(270, 140, 140, 30);
        jPanel1.add(comments);
        comments.setBounds(270, 180, 140, 30);

        jLabel8.setText("Media Type");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(340, 270, 70, 15);
        jPanel1.add(status);
        status.setBounds(270, 260, 50, 30);

        jLabel9.setText("Status Code");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(190, 270, 70, 15);
        jPanel1.add(mediatype);
        mediatype.setBounds(410, 260, 130, 30);

        jLabel10.setText("Student ID ");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(190, 70, 70, 15);
        jPanel1.add(name);
        name.setBounds(270, 100, 140, 30);

        itemCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Assignment 1", "Assignment 2", "Assignment 3", "Assignment 4", "Quiz 1", "Quiz 2", "Quiz 3", "Paper", "Midterm", "Final" }));
        jPanel1.add(itemCombo);
        itemCombo.setBounds(270, 20, 140, 30);

        clearBtn.setText("clear");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        jPanel1.add(clearBtn);
        clearBtn.setBounds(460, 180, 80, 30);

        jLabel1.setText("Total");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(190, 230, 30, 15);
        jPanel1.add(total);
        total.setBounds(230, 220, 50, 30);

        jLabel20.setText("Letter");
        jPanel1.add(jLabel20);
        jLabel20.setBounds(440, 230, 48, 15);
        jPanel1.add(letter);
        letter.setBounds(490, 220, 50, 30);

        jLabel22.setText("Possible");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(300, 230, 60, 15);
        jPanel1.add(possible);
        possible.setBounds(360, 220, 50, 30);

        tab.addTab("Instructor", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("");

        jPanel2.setPreferredSize(new java.awt.Dimension(580, 600));
        jPanel2.setLayout(null);

        jLabel11.setText("Released Grading Items");
        jPanel2.add(jLabel11);
        jLabel11.setBounds(30, 30, 150, 15);

        jScrollPane3.setViewportView(itemList1);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(30, 60, 140, 230);

        jLabel12.setText("Student ID ");
        jPanel2.add(jLabel12);
        jLabel12.setBounds(190, 70, 70, 15);
        jPanel2.add(id1);
        id1.setBounds(270, 60, 140, 30);

        jLabel13.setText("Student Name");
        jPanel2.add(jLabel13);
        jLabel13.setBounds(190, 110, 80, 15);
        jPanel2.add(name1);
        name1.setBounds(270, 100, 140, 30);

        jLabel14.setText("Grade");
        jPanel2.add(jLabel14);
        jLabel14.setBounds(190, 150, 50, 15);
        jPanel2.add(grade1);
        grade1.setBounds(270, 140, 140, 30);

        jLabel15.setText("Possible");
        jPanel2.add(jLabel15);
        jLabel15.setBounds(300, 230, 80, 15);
        jPanel2.add(comments1);
        comments1.setBounds(270, 180, 270, 30);

        jLabel16.setText("Status Code");
        jPanel2.add(jLabel16);
        jLabel16.setBounds(190, 270, 70, 15);
        jPanel2.add(status1);
        status1.setBounds(270, 260, 50, 30);

        jLabel17.setText("Media Type");
        jPanel2.add(jLabel17);
        jLabel17.setBounds(340, 270, 70, 15);
        jPanel2.add(mediatype1);
        mediatype1.setBounds(410, 260, 130, 30);

        jLabel18.setText("Response");
        jPanel2.add(jLabel18);
        jLabel18.setBounds(30, 300, 60, 15);

        responseText1.setEditable(false);
        responseText1.setColumns(20);
        responseText1.setRows(5);
        jScrollPane4.setViewportView(responseText1);

        jPanel2.add(jScrollPane4);
        jScrollPane4.setBounds(30, 330, 510, 200);

        readBtn1.setText("Check Grade");
        readBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readBtn1ActionPerformed(evt);
            }
        });
        jPanel2.add(readBtn1);
        readBtn1.setBounds(440, 60, 100, 30);

        jLabel19.setText("Comments");
        jPanel2.add(jLabel19);
        jLabel19.setBounds(190, 190, 80, 15);
        jPanel2.add(letter1);
        letter1.setBounds(490, 220, 50, 30);

        clearBtn1.setText("clear");
        clearBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtn1ActionPerformed(evt);
            }
        });
        jPanel2.add(clearBtn1);
        clearBtn1.setBounds(440, 100, 100, 30);

        jLabel21.setText("Total");
        jPanel2.add(jLabel21);
        jLabel21.setBounds(190, 230, 30, 15);
        jPanel2.add(total1);
        total1.setBounds(230, 220, 50, 30);

        jLabel23.setText("Letter ");
        jPanel2.add(jLabel23);
        jLabel23.setBounds(440, 230, 80, 15);
        jPanel2.add(possible1);
        possible1.setBounds(360, 220, 50, 30);

        tab.addTab("Student", jPanel2);

        getContentPane().add(tab);
        tab.setBounds(0, 0, 580, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        String item;
        boolean fromCombo = false;
        boolean fromList = false;
        if(itemCombo.getItemCount() > 0 && isId(id.getText()) == false){
            item = itemCombo.getSelectedItem().toString();
            itemCombo.removeItem(itemCombo.getSelectedItem());
            fromCombo = true;
            fromList = false;
        }
        else if(isId(id.getText()) && itemList.getSelectedIndex() >= 0 && itemList.getSelectedValue().toString().equals("") == false){
            item = itemList.getSelectedValue().toString().replace(" ", "");
            fromCombo = false;
            fromList = true;
        }
        else{
            responseText.setText("If Textfield id is empty, the item selected in the combobox will be created for every student;"
                               + "If Textfield id is not empty and some item in the list is selected, the selected item will be created for that id"
                               + "Other operations will not generate any effects");
            return;
        }
        //if(itemCombo.getItemCount() > 0){
        //    item = itemCombo.getSelectedItem().toString();
//            itemCombo.removeItem(itemCombo.getSelectedItem());
        ClientResponse response = postGradingItem(item); 
        if(response != null){
            status.setText(Integer.toString(response.getStatus()));
            mediatype.setText(response.getType().toString());        
            String entity = response.getEntity(String.class);
            responseText.setText(entity);
            try{ 
                 DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                 ByteArrayInputStream inputStream = new ByteArrayInputStream(entity.getBytes("utf-8"));
                 Document doc = dBuilder.parse(new InputSource(inputStream));
                 String title = doc.getElementsByTagName("Title").item(0).getTextContent();
                 if(fromCombo){
                    itemArray[itemCount] = new String(title);
                    itemCount++;
                    itemList.setListData(itemArray);
                    itemList1.setListData(itemArray);
                 }
             }
             catch (ParserConfigurationException e) {
                 e.printStackTrace(); 
                 responseText.setText("ParserConfigurationException");
             }
             catch(SAXException e){
                 e.printStackTrace();
                 responseText.setText("SAXException");
             }
             catch(java.io.IOException e){
                 e.printStackTrace();
                 responseText.setText("java.io.IOException");
             }
        }
        else
            responseText.setText("null");
 //       }
//        if (itemCombo.getItemCount() == 0){
//            itemArray[10] = new String("Total");
//            itemArray[11] = new String("Letter Grade");
//            itemList.setListData(itemArray);
//            itemList1.setListData(itemArray);
//        }
    }//GEN-LAST:event_createBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        id.setText("");
        grade.setText("");
        name.setText("");
        comments.setText("");
        total.setText("");
        letter.setText("");
        status.setText("");
        mediatype.setText("");
        responseText.setText("");
        possible.setText("");
        possible1.setText("");
    }//GEN-LAST:event_clearBtnActionPerformed

    private void clearBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtn1ActionPerformed
        id1.setText("");
        grade1.setText("");
        name1.setText("");
        comments1.setText("");
        status1.setText("");
        mediatype1.setText("");
        letter1.setText("");
        total1.setText("");
        responseText1.setText("");
        possible.setText("");
        possible1.setText("");
    }//GEN-LAST:event_clearBtn1ActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        if(isId(id.getText())){
            if(itemList.getSelectedIndex() >= 0 && itemList.getSelectedValue().toString().length() > 0 && (isGrade(grade.getText()) || comments.getText().equals("") == false)){
                String item = itemList.getSelectedValue().toString().replace(" ", "");
                String studentId = id.getText();
                String gradeStr = grade.getText();
                String comment = comments.getText();
                ClientResponse response = putGradingItem(item, studentId, gradeStr, comment);
                if(response != null){
//                    System.out.println(response.toString());
                    int statusNum = response.getStatus(); 
//                    System.out.println(statusNum);
//                    mediatype.setText(response.getType().toString());  
//                    String entity = response.getEntity(String.class);
                    status.setText(Integer.toString(statusNum));
                    if(statusNum == 204){
                        responseText.setText("No Content"); 
                        mediatype.setText("");
                    }
                    else{
                        mediatype.setText(response.getType().toString());  
                        String entity = response.getEntity(String.class);
                        responseText.setText(entity);
                    }
                }
                else
                    responseText.setText("null");
            }
            else if(itemList.getSelectedIndex() < 0/* && (isGrade(grade.getText()) || comments.getText() != "")*/){
                responseText.setText("Please select one grading item!"); 
            }
            else if((isGrade(grade.getText()) == false || grade.getText() == "") && comments.getText().isEmpty()/* && itemList.getSelectedIndex() >= 0*/){
                responseText.setText("Invalid grade or empty comments!"); 
            }
            else{
                responseText.setText("Please select one grading item and enter a valid grade or comments!"); 
            }        
        }
        else if(id.getText().isEmpty() == false){
            responseText.setText("Invalid id!");
        }
        else{
            responseText.setText("Please enter the id!");
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void readBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBtnActionPerformed
        if(isId(id.getText()) && itemList.getSelectedIndex() >= 0 && itemList.getSelectedValue().toString().equals("") == false){
            String item = itemList.getSelectedValue().toString().replace(" ", "");
            String studentId = id.getText();
            ClientResponse response = getGradingItem(item, studentId);
            if(response != null){
                int statusNum = response.getStatus();
                if(statusNum == 200){
                    status.setText(Integer.toString(statusNum));
                    mediatype.setText(response.getType().toString());  
                    String entity = response.getEntity(String.class);
                    responseText.setText(entity);
                    
                    try{
                        DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                        ByteArrayInputStream inputStream = new ByteArrayInputStream(entity.getBytes("utf-8"));
                        Document doc = dBuilder.parse(new InputSource(inputStream));
                        
                        String gradeStr = doc.getElementsByTagName("Grade").item(0).getTextContent();
                        String commentStr = doc.getElementsByTagName("Comment").item(0).getTextContent();
                        String nameStr = doc.getElementsByTagName("Name").item(0).getTextContent();
                        String totalStr = doc.getElementsByTagName("Total").item(0).getTextContent();
                        String letterStr = doc.getElementsByTagName("Letter").item(0).getTextContent();
                        String possibleStr = doc.getElementsByTagName("Possible").item(0).getTextContent();
                        name.setText(nameStr);
                        comments.setText(commentStr);
                        grade.setText(gradeStr);
                        total.setText(totalStr);
                        letter.setText(letterStr);
                        possible.setText(possibleStr);
                    }
                    catch (ParserConfigurationException e) {
                        e.printStackTrace();  
                        responseText.setText("Xml parsing error!");
                    }
                    catch(SAXException e){
                        responseText.setText("Xml parsing error!");
                    }
                    catch(java.io.IOException e){
                        responseText.setText("Xml parsing error!");
                    }
                }
                else{
                    status.setText(Integer.toString(statusNum));
                    mediatype.setText(response.getType().toString());  
                    String entity = response.getEntity(String.class);
                    responseText.setText(entity);
                }
            }
            else
                responseText.setText("null");
        }
        else if(isId(id.getText()) == false){
            responseText.setText("Please enter the id!");
        }
        else{
            responseText.setText("Please select one grading item!");
        }
    }//GEN-LAST:event_readBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(isId(id.getText()) && itemList.getSelectedIndex() >= 0 && itemList.getSelectedValue().toString().equals("") == false){
            String item = itemList.getSelectedValue().toString().replace(" ", "");
            String studentId = id.getText();
            ClientResponse response = deleteGradingItem(item, studentId);
            
            if(response != null){
                int statusNum = response.getStatus();
                if(statusNum == 204){
                    status.setText(Integer.toString(statusNum));
                    responseText.setText("No content");
                }
                else{
                    status.setText(Integer.toString(statusNum));
                    mediatype.setText(response.getType().toString());  
                    String entity = response.getEntity(String.class);
                    responseText.setText(entity);
                }
            }
            else{
                responseText.setText("null");
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void readBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readBtn1ActionPerformed
        if(isId(id1.getText()) && itemList1.getSelectedIndex() >= 0 && itemList1.getSelectedValue().toString().equals("") == false){
            String item = itemList1.getSelectedValue().toString().replace(" ", "");
            String studentId = id1.getText();
            ClientResponse response = getGradingItem(item, studentId);
            if(response != null){
                int statusNum = response.getStatus();
                if(statusNum == 200){
                    status1.setText(Integer.toString(statusNum));
                    mediatype1.setText(response.getType().toString());  
                    String entity = response.getEntity(String.class);
                    responseText1.setText(entity);
                    
                    try{
                        DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                        ByteArrayInputStream inputStream = new ByteArrayInputStream(entity.getBytes("utf-8"));
                        Document doc = dBuilder.parse(new InputSource(inputStream));
                        
                        String gradeStr = doc.getElementsByTagName("Grade").item(0).getTextContent();
                        String commentStr = doc.getElementsByTagName("Comment").item(0).getTextContent();
                        String nameStr = doc.getElementsByTagName("Name").item(0).getTextContent();
                        String totalStr = doc.getElementsByTagName("Total").item(0).getTextContent();
                        String letterStr = doc.getElementsByTagName("Letter").item(0).getTextContent();
                        String possibleStr = doc.getElementsByTagName("Possible").item(0).getTextContent();
                        name1.setText(nameStr);
                        comments1.setText(commentStr);
                        grade1.setText(gradeStr);
                        total1.setText(totalStr);
                        letter1.setText(letterStr);
                        possible1.setText(possibleStr);
                    }
                    catch (ParserConfigurationException e) {
                        e.printStackTrace();  
                        responseText1.setText("Xml parsing error!");
                    }
                    catch(SAXException e){
                        responseText1.setText("Xml parsing error!");
                    }
                    catch(java.io.IOException e){
                        responseText1.setText("Xml parsing error!");
                    }
                }
                else{
                    status1.setText(Integer.toString(statusNum));
                    mediatype1.setText(response.getType().toString());  
                    String entity = response.getEntity(String.class);
                    responseText1.setText(entity);
                }
            }
            else
                responseText1.setText("null");
        }
        else if(isId(id1.getText()) == false){
            responseText1.setText("Please enter the id!");
        }
        else{
            responseText1.setText("Please select one grading item!");
        }
    }//GEN-LAST:event_readBtn1ActionPerformed

    private static boolean isId(String id){
        if((id.length() == 1 && id.charAt(0) >= '1' && id.charAt(0) <= '9') ||
           (id.equals("10")))
            return true;
        else 
            return false;
    }
    
    private static boolean isGrade(String grade){
        if((grade.length() == 1 && Character.isDigit(grade.charAt(0))) ||
           (grade.length() == 2 && Character.isDigit(grade.charAt(0)) && Character.isDigit(grade.charAt(1))) ||
           (grade.equals("100")))
            return true;
        else if(grade.equals(""))
            return false;
        else 
            return false;
    }
    
    private ClientResponse postGradingItem(String item){
        String xmlString = new String();
        ClientResponse response;
        
        String type = new String(checkType(item));
        
        try{
            Document request = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            Element root = request.createElement("NewGradingItem");
            root.setAttribute("xmlns", XMLNS);
            request.appendChild(root);
            Element child = request.createElement("GradingItem");
            Element titleElement = request.createElement("Title");
            titleElement.setTextContent(item);
            Element typeElement = request.createElement("Type");
            typeElement.setTextContent(type);
            Element idElement = request.createElement("Id");
            if(isId(id.getText()))
                idElement.setTextContent(id.getText());
            else
                idElement.setTextContent("");
            child.appendChild(titleElement);
            child.appendChild(typeElement);
            child.appendChild(idElement);
            root.appendChild(child);
            
            try{
                Transformer transformer = TransformerFactory.newInstance().newTransformer();
                transformer.setOutputProperty("encoding", "UTF-8");
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                transformer.transform(new DOMSource(request), new StreamResult(stream));
                xmlString = stream.toString();
//                System.out.println(xmlString);
                response = webResource.type(MediaType.APPLICATION_XML).post(ClientResponse.class, xmlString);
                if(response == null){
                    return null;
                }
                return response;
            }
            catch (TransformerConfigurationException e) {  
                e.printStackTrace();  
            } 
            catch (TransformerException e) { 
                e.printStackTrace();  
            }               
        }
        catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    private ClientResponse putGradingItem(String item, String studentId, String gradeStr, String comment){
        String xmlString = new String();
        ClientResponse response;
        try{
            Document request = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            Element root = request.createElement("UpdateGradingItem");
            root.setAttribute("xmlns", XMLNS);
            request.appendChild(root);
            Element gradeElement = request.createElement("Grade");
            gradeElement.setTextContent(gradeStr);
            Element commentElement = request.createElement("Comment");
            commentElement.setTextContent(comment);
            root.appendChild(gradeElement);
            root.appendChild(commentElement);
            
            try{
                Transformer transformer = TransformerFactory.newInstance().newTransformer();
                transformer.setOutputProperty("encoding", "UTF-8");
                ByteArrayOutputStream stream = new ByteArrayOutputStream();
                transformer.transform(new DOMSource(request), new StreamResult(stream));
                xmlString = stream.toString();
//                System.out.println(xmlString);
                response = webResource.path(studentId).path(item).type(MediaType.APPLICATION_XML).put(ClientResponse.class, xmlString);
                if(response == null){
                    return null;
                }
                return response;
            }
            catch (TransformerConfigurationException e) {  
                e.printStackTrace();  
            } 
            catch (TransformerException e) { 
                e.printStackTrace();  
            }               
        }
        catch (ParserConfigurationException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    private String checkType(String item){
        if(item.indexOf("Assignment") >= 0)
            return "Assignment";
        else if(item.indexOf("Quiz") >= 0)
            return "Quiz";
        else if(item.equalsIgnoreCase("Midterm") || item.equalsIgnoreCase("Final"))
            return "Exam";
        else
            return "Paper";
    }
    
    private ClientResponse getGradingItem(String item, String studentId){
        ClientResponse response;
        response = webResource.path(studentId).path(item).get(ClientResponse.class);
        if(response == null)
            return null;
        return response;
    }
    
    private ClientResponse deleteGradingItem(String item, String studentId){
        ClientResponse response;
        response = webResource.path(studentId).path(item).delete(ClientResponse.class);
        if(response == null)
            return null;
        return response;
    }
    
    private void getReleasedItems(){
        ClientResponse response;
        response = webResource.path("releaseditems").get(ClientResponse.class);
        if(response != null){
            int statusNum = response.getStatus();
            if(statusNum == 200){
                String entity = response.getEntity(String.class);
                try{
                    DocumentBuilder dBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
                    ByteArrayInputStream inputStream = new ByteArrayInputStream(entity.getBytes("utf-8"));
                    Document doc = dBuilder.parse(new InputSource(inputStream));
                    
                    NodeList releasedItemList = doc.getElementsByTagName("Item");
                    String[] itemlist = new String[releasedItemList.getLength()];
                    for(int i = 0; i < releasedItemList.getLength(); i++){
                        itemlist[i] = new String(releasedItemList.item(i).getTextContent());
                        itemCombo.removeItem(itemlist[i]);
                    }
                    itemList.setListData(itemlist);
                    itemList1.setListData(itemlist);
                }
                catch (ParserConfigurationException e) {
                    e.printStackTrace();  
                    responseText.setText("Xml parsing error!");
                }
                catch(SAXException e){
                    responseText.setText("Xml parsing error!");
                }
                catch(java.io.IOException e){
                    responseText.setText("Xml parsing error!");
                }
            }
        }
        else{
            responseText.setText("Fail to retrieve released items!");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {               
                new GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JButton clearBtn1;
    private javax.swing.JTextField comments;
    private static javax.swing.JTextField comments1;
    private javax.swing.JButton createBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField grade;
    private static javax.swing.JTextField grade1;
    private javax.swing.JTextField id;
    private javax.swing.JTextField id1;
    private javax.swing.JComboBox itemCombo;
    private javax.swing.JList itemList;
    private javax.swing.JList itemList1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JTextField letter;
    static javax.swing.JTextField letter1;
    private static javax.swing.JTextField mediatype;
    private static javax.swing.JTextField mediatype1;
    private static javax.swing.JTextField name;
    private static javax.swing.JTextField name1;
    private static javax.swing.JTextField possible;
    private static javax.swing.JTextField possible1;
    private javax.swing.JButton readBtn;
    private javax.swing.JButton readBtn1;
    private static javax.swing.JTextArea responseText;
    private static javax.swing.JTextArea responseText1;
    private static javax.swing.JTextField status;
    private static javax.swing.JTextField status1;
    private javax.swing.JTabbedPane tab;
    private static javax.swing.JTextField total;
    static javax.swing.JTextField total1;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
